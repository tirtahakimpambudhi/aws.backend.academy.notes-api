{
	"info": {
		"_postman_id": "7ef8bedb-dcb9-4602-88fe-7bbccd837206",
		"name": "Notes API Test",
		"description": "This demo learn API Test from platform education Dicoding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24255225",
		"_collection_link": "https://bold-rocket-276238.postman.co/workspace/coba~24c86921-41cc-4d11-ade1-089485e3b528/collection/24255225-7ef8bedb-dcb9-4602-88fe-7bbccd837206?action=share&source=collection_link&creator=24255225"
	},
	"item": [
		{
			"name": "Not Found Get By ID Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 404);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Not Found\");\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\");\r",
							"    pm.expect(responseBody.message).to.contain(\"not found\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomUUID = pm.variables.replaceIn(\"{{$randomUUID}}\");\r",
							"pm.environment.set(\"noteId\",randomUUID)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Not Found Update Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 404);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Not Found\");\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\");\r",
							"    pm.expect(responseBody.message).to.contain(\"not found\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomUUID = pm.variables.replaceIn(\"{{$randomUUID}}\");\r",
							"pm.environment.set(\"noteId\",randomUUID)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":  \"{{$randomFullName}} buying product {{$randomProductName}}\",\r\n    \"tags\": [\"{{$randomDomainName}}\"],\r\n    \"body\": \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Not Found Delete Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 404);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Not Found\");\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\");\r",
							"    pm.expect(responseBody.message).to.contain(\"not found\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomUUID = pm.variables.replaceIn(\"{{$randomUUID}}\");\r",
							"pm.environment.set(\"noteId\",randomUUID)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Notes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 201);\r",
							"    pm.expect(responseBody).to.ownProperty(\"status\", \"STATUS_CREATED\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Successfully created note\");\r",
							"    pm.expect(responseBody.data).to.be.an(\"object\");\r",
							"    pm.expect(responseBody.data).to.ownProperty(\"id\");\r",
							"    // SET  the noteId actual id from new notes\r",
							"    pm.environment.set(\"noteId\", responseBody.data.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":  \"{{$randomFullName}} buying product {{$randomProductName}}\",\r\n    \"tags\": [\"{{$randomDomainName}}\"],\r\n    \"body\": \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Create Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 400);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Bad Request\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Invalid request payload input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 200);\r",
							"    pm.expect(responseBody).to.ownProperty(\"status\", \"STATUS_OK\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Successfully get all notes\");\r",
							"    pm.expect(responseBody.data).to.ownProperty(\"notes\");\r",
							"    pm.expect(responseBody.data.notes).to.be.an(\"array\");\r",
							"    pm.expect(responseBody.data.notes).lengthOf.at.least(1);\r",
							"    responseBody.data.notes.forEach((note) => {\r",
							"        pm.expect(note).to.be.an(\"object\");\r",
							"        pm.expect(note).to.ownProperty(\"id\");\r",
							"        pm.expect(note).to.ownProperty(\"title\");\r",
							"        pm.expect(note).to.ownProperty(\"tags\");\r",
							"        pm.expect(note.tags).lengthOf.at.least(1);\r",
							"        pm.expect(note).to.ownProperty(\"body\");\r",
							"        pm.expect(note).to.ownProperty(\"createdAt\");\r",
							"        pm.expect(note).to.ownProperty(\"updatedAt\");\r",
							"    })\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By ID Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedId = pm.environment.get(\"noteId\");\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 200);\r",
							"    pm.expect(responseBody).to.ownProperty(\"status\", \"STATUS_OK\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Successfully get by id note\");\r",
							"    pm.expect(responseBody.data).to.ownProperty(\"note\");\r",
							"    pm.expect(responseBody.data.note).to.be.an(\"object\");\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"id\",expectedId);\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"title\");\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"tags\");\r",
							"    pm.expect(responseBody.data.note.tags).lengthOf.at.least(1);\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"body\");\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"createdAt\");\r",
							"    pm.expect(responseBody.data.note).to.ownProperty(\"updatedAt\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid ID Get By ID Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 400);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Bad Request\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Invalid request params input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/emptyId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"emptyId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const baseUrl = pm.environment.get(\"baseUrl\");\r",
							"const expectedId = pm.environment.get(\"noteId\");\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 200);\r",
							"    pm.expect(responseBody).to.ownProperty(\"status\", \"STATUS_OK\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Successfully update by id note\");\r",
							"    pm.expect(responseBody.data).to.be.null;\r",
							"\r",
							"    // check is data updated or not \r",
							"    const requestBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.sendRequest(`${baseUrl}/notes/${expectedId}`,(error, response) => {\r",
							"        if (!error) {\r",
							"            const { data: { note } } = response.json();\r",
							"            pm.expect(note.title).to.equals(requestBody.title);\r",
							"            pm.expect(JSON.stringify(note.title)).to.equals(JSON.stringify((requestBody.tags)))\r",
							"            pm.expect(note.body).to.equals(requestBody.body);\r",
							"        };\r",
							"    })\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":  \"{{$randomFullName}} buying product {{$randomProductName}}\",\r\n    \"tags\": [\"{{$randomDomainName}}\"],\r\n    \"body\": \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Update Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 400);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Bad Request\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Invalid request payload input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid ID Update Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 400);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Bad Request\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Invalid request params input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":  \"{{$randomFullName}} buying product {{$randomProductName}}\",\r\n    \"tags\": [\"{{$randomDomainName}}\"],\r\n    \"body\": \"{{$randomLoremParagraph}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes/emptyId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"emptyId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const baseUrl = pm.environment.get(\"baseUrl\");\r",
							"const expectedId = pm.environment.get(\"noteId\");\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 200);\r",
							"    pm.expect(responseBody).to.ownProperty(\"status\", \"STATUS_OK\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Successfully delete by id note\");\r",
							"    pm.expect(responseBody.data).to.be.null;\r",
							"    pm.sendRequest(`${baseUrl}/notes/${expectedId}`, (error,response) => {\r",
							"        const responseBody = response.json();\r",
							"        // match the response body property to value \r",
							"        pm.expect(responseBody).to.ownProperty(\"statusCode\", 404);\r",
							"        pm.expect(responseBody).to.ownProperty(\"error\", \"Not Found\");\r",
							"        // match the response body property to value \r",
							"        pm.expect(responseBody).to.ownProperty(\"message\");\r",
							"        pm.expect(responseBody.message).to.contain(\"not found\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid ID Delete Notes By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header contains 'application/json'\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property value\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"statusCode\", 400);\r",
							"    pm.expect(responseBody).to.ownProperty(\"error\", \"Bad Request\");\r",
							"\r",
							"    // match the response body property to value \r",
							"    pm.expect(responseBody).to.ownProperty(\"message\", \"Invalid request params input\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/emptyId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"emptyId"
					]
				}
			},
			"response": []
		}
	]
}